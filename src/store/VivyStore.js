/**
 * @file VivyStore.js
 */

import {createStore, applyMiddleware} from 'redux';

// Middlewares
import {routerMiddleware} from 'connected-react-router';
import createModelActionMiddleware from '../middlewares/ModelActionMiddleware';

// Reducers
import createRootReducer from '../reducers/RootReducer';

/**
 * Create Vivy store
 * @param history
 * @param plugins
 * @param extraMiddlewares
 * @returns {{}}
 */
export default function createVivyStore(history, plugins, extraMiddlewares) {

    // All unsubscriptions generated by subscriptions in models
    const unsubscriptions = {};

    // Handle actions in models
    const ModelActionMiddleware = createModelActionMiddleware();

    // Create origin redux store
    const originStore = createStore(
        createRootReducer(history),
        applyMiddleware(
            ModelActionMiddleware,
            ...plugins?.reduce((pluginMiddlewares, plugin) => [
                ...pluginMiddlewares,
                ...(plugin.extraMiddlewares || [])
            ], []),
            ...(extraMiddlewares || []),
            routerMiddleware(history)
        )
    );

    /**
     * Register subscriptions in models
     * @param nameSpace
     * @param subscriptions
     */
    function registerSubscriptions(nameSpace, subscriptions) {

        if (!nameSpace || !subscriptions || subscriptions.length < 1) {
            return;
        }

        Object.keys(subscriptions)?.forEach(key => {

            if (!unsubscriptions.hasOwnProperty(nameSpace)) {
                unsubscriptions[nameSpace] = {};
            }

            unsubscriptions[nameSpace][key] = subscriptions[key]({history})(
                originStore.dispatch,
                originStore.getState
            );

        });

    }

    return {

        // Store
        ...originStore,

        // Origin store
        originStore,

        // History
        history,

        // Async reducers
        asyncReducers: {},

        // Register actions
        registerActions: ModelActionMiddleware.register,

        // Register subscriptions
        registerSubscriptions,

        // All registered plugins
        plugins

    };

}
